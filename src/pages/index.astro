---
import Layout from '../layouts/Layout.astro';
import PhotoGallery from '../components/PhotoGallery.astro';
import DebugInfo from '../components/DebugInfo.astro';

// 写真データ読み込み
let photos = [];
try {
  const photosModule = await import('../data/photos.json');
  photos = photosModule.default || [];
} catch (e) {
  console.log('No photos found');
}

const latestPhotos = photos.slice(0, 6);
---

<Layout title="Photography Portfolio | FUJIFILM X-T50">
  <!-- Navigation -->
  <nav class="fixed top-0 left-0 right-0 z-50 p-6 md:p-8">
    <div class="flex justify-between items-center">
      <div class="font-display font-light text-lg tracking-tighter">
        Photon Log
      </div>
      <div class="flex gap-8 text-sm font-medium">
        <a href="#work" class="hover:text-stone-300 transition-colors">Work</a>
        <a href="https://www.instagram.com/photon_log/" target="_blank" rel="noopener noreferrer" 
           class="hover:text-stone-300 transition-colors">Instagram</a>
      </div>
    </div>
  </nav>

  <!-- Hero Section -->
  <section class="relative min-h-screen flex items-center justify-center px-6 md:px-8">
    <div class="max-w-4xl mx-auto text-center">
      <h1 class="font-display font-light text-6xl md:text-8xl lg:text-9xl leading-super-tight tracking-super-tight mb-8">
        Street
        <br />
        Chronicles
      </h1>
      
      <p class="text-lg md:text-xl text-stone-400 max-w-2xl mx-auto mb-12 leading-relaxed">
        Capturing the quiet poetry of everyday moments through the lens of a FUJIFILM X-T50
      </p>
      
      <a href="#work" 
         class="inline-block text-sm font-medium tracking-wide uppercase border border-stone-700 px-8 py-4 hover:bg-stone-900 transition-all duration-300">
        View Work
      </a>
    </div>
  </section>

  <!-- Gallery Section -->
  <section id="work" class="px-6 md:px-8 py-20">
    <div class="max-w-7xl mx-auto">
      <h2 class="font-display font-light text-4xl md:text-5xl tracking-tighter mb-16 text-center">
        Latest Work
      </h2>
      
      {photos.length > 0 ? (
        <div id="masonry-grid" class="columns-1 md:columns-2 lg:columns-3 xl:columns-4 gap-4 space-y-4">
          <!-- Initial photos -->
          {photos.slice(0, 3).map((photo) => (
            <div class="photo-item break-inside-avoid mb-4 group relative overflow-hidden bg-stone-900 rounded-lg">
              <img
                src={`${import.meta.env.BASE_URL}${photo.src}`.replace(/\/+/g, '/')}
                alt={photo.alt}
                class="w-full h-auto object-cover transition-transform duration-700 group-hover:scale-105"
                loading="lazy"
                onerror="console.log('Failed to load:', this.src)"
              />
              
              <!-- Minimal overlay with just essential info -->
              <div class="absolute inset-0 bg-gradient-to-t from-black/80 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                <div class="absolute bottom-0 left-0 right-0 p-4">
                  <div class="text-xs font-mono text-stone-300 space-y-1">
                    <div>{photo.settings.aperture} • {photo.settings.shutter} • ISO {photo.settings.iso}</div>
                    {photo.settings.focalLength && <div>{photo.settings.focalLength}</div>}
                    <div class="text-stone-400">{new Date(photo.date).toLocaleDateString('en-US', { year: 'numeric', month: 'short' })}</div>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      ) : (
        <div class="text-center text-stone-500">
          <p>No photos available</p>
          <code class="block mt-4 text-sm font-mono">npm run add-photo /path/to/photo.jpg</code>
        </div>
      )}
    </div>
  </section>

  <!-- Footer -->
  <footer class="px-6 md:px-8 py-20 border-t border-stone-800">
    <div class="max-w-4xl mx-auto text-center">
      <p class="text-stone-500 mb-4">
        Shot with FUJIFILM X-T50 & XF16-55mmF2.8 R LM WR II
      </p>
      <a href="https://www.instagram.com/photon_log/" 
         target="_blank" 
         rel="noopener noreferrer"
         class="text-sm font-medium tracking-wide uppercase hover:text-stone-300 transition-colors">
        Follow on Instagram
      </a>
    </div>
  </footer>

  <!-- Debug Info (本番では削除) -->
  {!import.meta.env.PROD && <DebugInfo />}

  <script define:vars={{ photos, baseUrl: import.meta.env.BASE_URL }}>
    // Dynamic infinite scroll portfolio
    let currentPhotoIndex = 3;
    const usedPhotos = new Set();
    let isLoading = false;
    
    // Initialize used photos
    photos.slice(0, 3).forEach((photo, index) => {
      usedPhotos.add(index);
    });
    
    function getRandomPhoto() {
      const availableIndices = [];
      for (let i = 0; i < photos.length; i++) {
        if (!usedPhotos.has(i)) {
          availableIndices.push(i);
        }
      }
      
      if (availableIndices.length === 0) {
        // Reset if all photos used
        usedPhotos.clear();
        photos.slice(0, 3).forEach((photo, index) => {
          usedPhotos.add(index);
        });
        return getRandomPhoto();
      }
      
      const randomIndex = availableIndices[Math.floor(Math.random() * availableIndices.length)];
      usedPhotos.add(randomIndex);
      return photos[randomIndex];
    }
    
    function createPhotoElement(photo) {
      const photoDiv = document.createElement('div');
      photoDiv.className = 'photo-item break-inside-avoid mb-4 group relative overflow-hidden bg-stone-900 rounded-lg opacity-0 translate-y-8 transition-all duration-700';
      
      const img = document.createElement('img');
      img.src = `${baseUrl}${photo.src}`.replace(/\/+/g, '/');
      img.alt = photo.alt;
      img.className = 'w-full h-auto object-cover transition-transform duration-700 group-hover:scale-105';
      img.loading = 'lazy';
      img.onerror = () => console.log('Failed to load:', img.src);
      
      const overlay = document.createElement('div');
      overlay.className = 'absolute inset-0 bg-gradient-to-t from-black/80 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300';
      
      const overlayContent = document.createElement('div');
      overlayContent.className = 'absolute bottom-0 left-0 right-0 p-4';
      
      const photoInfo = document.createElement('div');
      photoInfo.className = 'text-xs font-mono text-stone-300 space-y-1';
      
      const settings = document.createElement('div');
      settings.textContent = `${photo.settings.aperture} • ${photo.settings.shutter} • ISO ${photo.settings.iso}`;
      
      const focalLength = document.createElement('div');
      if (photo.settings.focalLength) {
        focalLength.textContent = photo.settings.focalLength;
      }
      
      const date = document.createElement('div');
      date.className = 'text-stone-400';
      date.textContent = new Date(photo.date).toLocaleDateString('en-US', { year: 'numeric', month: 'short' });
      
      photoInfo.appendChild(settings);
      if (photo.settings.focalLength) {
        photoInfo.appendChild(focalLength);
      }
      photoInfo.appendChild(date);
      
      overlayContent.appendChild(photoInfo);
      overlay.appendChild(overlayContent);
      
      photoDiv.appendChild(img);
      photoDiv.appendChild(overlay);
      
      return photoDiv;
    }
    
    function loadNewPhotos() {
      if (isLoading) return;
      isLoading = true;
      
      const grid = document.getElementById('masonry-grid');
      if (!grid) return;
      
      // Add 2-4 random photos
      const photosToAdd = Math.floor(Math.random() * 3) + 2;
      
      for (let i = 0; i < photosToAdd; i++) {
        const photo = getRandomPhoto();
        const photoElement = createPhotoElement(photo);
        grid.appendChild(photoElement);
        
        // Animate in
        setTimeout(() => {
          photoElement.style.opacity = '1';
          photoElement.style.transform = 'translateY(0)';
        }, i * 150);
      }
      
      setTimeout(() => {
        isLoading = false;
      }, 1000);
    }
    
    // Scroll event listener
    function handleScroll() {
      const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
      const windowHeight = window.innerHeight;
      const documentHeight = document.documentElement.scrollHeight;
      
      // Load new photos when 80% scrolled
      if (scrollTop + windowHeight >= documentHeight * 0.8) {
        loadNewPhotos();
      }
    }
    
    // Smooth parallax effect on scroll
    function handleParallax() {
      const scrolled = window.pageYOffset;
      const heroSection = document.querySelector('section');
      
      if (heroSection) {
        heroSection.style.transform = `translateY(${scrolled * 0.5}px)`;
      }
      
      // Add subtle movement to photo items
      const photoItems = document.querySelectorAll('.photo-item');
      photoItems.forEach((item, index) => {
        const speed = 0.1 + (index % 3) * 0.05;
        item.style.transform = `translateY(${scrolled * speed}px)`;
      });
    }
    
    // Initialize
    window.addEventListener('scroll', () => {
      handleScroll();
      requestAnimationFrame(handleParallax);
    });
    
    // Load some initial photos after page load
    setTimeout(loadNewPhotos, 2000);
  </script>
</Layout>