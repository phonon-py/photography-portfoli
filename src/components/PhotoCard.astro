---
export interface Photo {
  id: string;
  src: string;
  srcWebP?: string;
  thumbnail: string;
  alt: string;
  camera: string;
  lens: string;
  settings: {
    aperture: string;
    shutter: string;
    iso: number;
    focalLength?: string;
  };
  filmSimulation?: string;
  date: string;
  tags: string[];
}

interface Props {
  photo: Photo;
}

const { photo } = Astro.props;

// パス解決ヘルパー関数
function resolveImagePath(imagePath: string): string {
  const baseUrl = import.meta.env.BASE_URL || '/';
  // ベースURLの末尾がスラッシュで終わっているか確認
  const normalizedBase = baseUrl.endsWith('/') ? baseUrl : `${baseUrl}/`;
  // パスの先頭がスラッシュの場合は削除
  const normalizedPath = imagePath.startsWith('/') ? imagePath.slice(1) : imagePath;
  // パスを結合し、重複スラッシュを削除
  const fullPath = `${normalizedBase}${normalizedPath}`.replace(/\/+/g, '/');
  // URLエンコードを適用（スペース等の特殊文字対応）
  return fullPath.split('/').map(segment => encodeURIComponent(segment)).join('/');
}
---

<article class="group relative overflow-hidden rounded-lg bg-gray-900 aspect-[4/3] cursor-pointer">
  <picture>
    {photo.srcWebP && (
      <source srcset={resolveImagePath(photo.srcWebP)} type="image/webp" />
    )}
    <img
      src={resolveImagePath(photo.src)}
      alt={photo.alt}
      class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
      loading="lazy"
    />
  </picture>
  
  <!-- EXIF Overlay -->
  <div class="absolute inset-0 bg-gradient-to-t from-black/90 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300">
    <div class="absolute bottom-0 left-0 right-0 p-4 text-white">
      <h3 class="font-semibold text-lg mb-2">{photo.alt}</h3>
      
      <div class="grid grid-cols-2 gap-2 text-sm font-mono text-gray-300 mb-2">
        <div>📷 {photo.camera}</div>
        <div>🔍 {photo.lens}</div>
        <div>⚙️ {photo.settings.aperture}</div>
        <div>⏱️ {photo.settings.shutter}</div>
        <div>📊 ISO {photo.settings.iso}</div>
        {photo.settings.focalLength && <div>📏 {photo.settings.focalLength}</div>}
      </div>
      
      
      <div class="flex justify-between text-xs text-gray-400">
        <span>{new Date(photo.date).toLocaleDateString('ja-JP')}</span>
        {photo.tags.length > 0 && (
          <span>#{photo.tags[0]}</span>
        )}
      </div>
    </div>
  </div>
</article>